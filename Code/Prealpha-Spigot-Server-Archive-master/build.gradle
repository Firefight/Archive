plugins {
    id 'java'
    id 'io.freefair.lombok' version '5.2.1'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "de.undercouch.download" version "4.1.2"
}

group 'ht.firefig.cardinal'
version '1.0.0'
def nmsVersion = "1.18.2"
def apiVersion = '1.18'
def spigotJarVersion = '1.18.2-R0.1-SNAPSHOT'
def main = 'studio.archetype.firefight.cardinal.server.Cardinal'
def name = 'Cardinal'

// ADD YOURSELF AS A NEW LINE IF YOU WANT YOUR OWN BUILD TASK GENERATED
// ======================== WINDOWS =============================
registerCustomOutputTask('Cyberpwn', 'C://Users/cyberpwn/Documents/development/server/plugins')
registerCustomOutputTask('Lizzy', 'C://Users/lizai/Documents/mc/plugins')
// ========================== UNIX ==============================
registerCustomOutputTaskUnix('CyberpwnLT', '/Users/danielmills/Documents/development/server/plugins')
// ==============================================================

/**
 * Gradle is weird sometimes, we need to delete the plugin yml from the build folder to actually filter properly.
 */
file(jar.archiveFile.get().getAsFile().getParentFile().getParentFile().getParentFile().getAbsolutePath() + '/build/resources/main/plugin.yml').delete()

compileJava {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenLocal {
        content {
            includeGroup("org.bukkit")
            includeGroup("org.spigotmc")
        }
    }
    maven { url "https://dl.cloudsmith.io/public/arcane/archive/maven/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://nexus.hc.to/content/repositories/pub_releases" }
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.hashicorp.nomad:nomad-sdk:0.11.3.0'
    compileOnly 'net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT'
    implementation 'org.bukkit:craftbukkit:1.18.2-R0.1-SNAPSHOT:remapped-mojang'
    implementation 'org.mongodb:mongodb-driver-sync:4.5.0'
    implementation 'art.arcane:GSocks:22.3.5'
    compileOnly 'net.milkbowl.vault:VaultAPI:1.7'
}

def buildToolsJar = new File(buildDir, "buildtools/BuildTools.jar");
def specialSourceJar = new File(buildDir, "specialsource/SpecialSource.jar");
def buildToolsFolder = new File(buildDir, "buildtools");
def specialSourceFolder = new File(buildDir, "specialsource");
def buildToolsHint = new File(buildDir, "buildtools/craftbukkit-" + nmsVersion + ".jar");
def outputShadeJar = new File(buildDir, "libs/Cardinal-" + version + "-all.jar");
def ssiJar = new File(buildDir, "specialsource/Cardinal-" + version + "-all.jar");
def ssobfJar = new File(buildDir, "specialsource/Cardinal-" + version + "-rmo.jar");
def ssJar = new File(buildDir, "specialsource/Cardinal-" + version + "-rma.jar");
def homePath = System.properties['user.home']
def m2 = new File(homePath + "/.m2/repository")
def m2s = m2.getAbsolutePath()

// ======================== Building Mapped Jars =============================
task downloadBuildtools(type: Download) {
    group "remapping"
    src 'https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar'
    dest buildToolsJar
    onlyIf {
        !buildToolsJar.exists()
    }
}

task downloadSpecialSource(type: Download) {
    group "remapping"
    src 'https://repo.maven.apache.org/maven2/net/md-5/SpecialSource/1.10.0/SpecialSource-1.10.0-shaded.jar'
    dest specialSourceJar
    onlyIf {
        !specialSourceJar.exists()
    }
}

shadowJar {
    dependencies {
        exclude(dependency('com.google.code.gson:gson:2.9.0'))
        exclude(dependency('com.hashicorp.nomad:nomad-sdk:0.11.3.0'))
    }
}

task executeBuildTools(dependsOn: downloadBuildtools, type: JavaExec) {
    group "remapping"
    classpath = files(buildToolsJar)
    workingDir = buildToolsFolder
    args = [
            "--rev",
            nmsVersion,
            "--compile",
            "craftbukkit",
            "--remap"
    ]
    onlyIf {
        !buildToolsHint.exists()
    }
}

task copyBuildToSpecialSource(type: Copy) {
    group "remapping"
    from outputShadeJar
    into specialSourceFolder
    dependsOn(downloadSpecialSource, shadowJar)
}

task specialSourceRemapObfuscate(type: JavaExec) {
    group "remapping"
    dependsOn(copyBuildToSpecialSource, downloadSpecialSource, shadowJar)
    workingDir = specialSourceFolder
    classpath = files(specialSourceJar,
            new File(m2s + "/org/spigotmc/spigot/" + spigotJarVersion + "/spigot-" + spigotJarVersion + "-remapped-mojang.jar"))
    mainClass = "net.md_5.specialsource.SpecialSource"
    args = [
            "--live",
            "-i",
            ssiJar.getName(),
            "-o",
            ssobfJar.getName(),
            "-m",
            m2s + "/org/spigotmc/minecraft-server/" + spigotJarVersion + "/minecraft-server-" + spigotJarVersion + "-maps-mojang.txt",
            "--reverse",
    ]
}

task specialSourceRemap(type: JavaExec) {
    group "remapping"
    dependsOn(specialSourceRemapObfuscate)
    workingDir = specialSourceFolder
    classpath = files(specialSourceJar,
            new File(m2s + "/org/spigotmc/spigot/" + spigotJarVersion + "/spigot-" + spigotJarVersion + "-remapped-obf.jar"))
    mainClass = "net.md_5.specialsource.SpecialSource"
    args = [
            "--live",
            "-i",
            ssobfJar.getName(),
            "-o",
            ssJar.getName(),
            "-m",
            m2s + "/org/spigotmc/minecraft-server/" + spigotJarVersion + "/minecraft-server-" + spigotJarVersion + "-maps-spigot.csrg"
    ]
}

compileJava {
    dependsOn(executeBuildTools)
    def ENABLE_PREVIEW = "--enable-preview"
    options.compilerArgs.add(ENABLE_PREVIEW)
    options.compilerArgs.add("-Xlint:preview")
}

processResources {

    filesMatching('**/plugin.yml') {
        expand(
                'name': name.toString(),
                'version': version.toString(),
                'main': main.toString(),
                'apiversion': apiVersion.toString()
        )
    }
}

def registerCustomOutputTask(name, path) {
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        return;
    }

    tasks.register('build' + name, Copy) {
        group('development')
        outputs.upToDateWhen { false }
        dependsOn(cardinal)
        from(new File(buildDir, "Cardinal-" + version + ".jar"))
        into(file(path))
        rename { String fileName ->
            fileName.replace("Cardinal-" + version + ".jar", "Cardinal.jar")
        }
    }
}

def registerCustomOutputTaskUnix(name, path) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        return;
    }

    tasks.register('build' + name, Copy) {
        group('development')
        outputs.upToDateWhen { false }
        dependsOn(cardinal)
        from(new File(buildDir, "Cardinal-" + version + ".jar"))
        into(file(path))
        rename { String fileName ->
            fileName.replace("Cardinal-" + version + ".jar", "Cardinal.jar")
        }
    }
}

task setup() {
    group("cardinal")
    dependsOn(clean, executeBuildTools)
}

task cardinal(type: Copy) {
    group "cardinal"
    from ssJar
    into buildDir
    rename { String fileName ->
        fileName.replace('Cardinal-' + version + '-rma.jar', "Cardinal-" + version + ".jar")
    }
    dependsOn(specialSourceRemap)
}

if (JavaVersion.current().toString() != "17") {
    System.err.println()
    System.err.println("=========================================================================================================")
    System.err.println("You must run gradle on Java 17. You are using " + JavaVersion.current())
    System.err.println()
    System.err.println("=== For IDEs ===")
    System.err.println("1. Configure the project for Java 17")
    System.err.println("2. Configure the bundled gradle to use Java 17 in settings")
    System.err.println()
    System.err.println("=== For Command Line (gradlew) ===")
    System.err.println("1. Install JDK 17 from https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html")
    System.err.println("2. Set JAVA_HOME environment variable to the new jdk installation folder such as C:\\Program Files\\Java\\jdk-17.0.1")
    System.err.println("3. Open a new command prompt window to get the new environment variables if need be.")
    System.err.println("=========================================================================================================")
    System.err.println()
    System.exit(69);
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
